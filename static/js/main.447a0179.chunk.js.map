{"version":3,"sources":["components/container/container.js","components/navbar/navbar.js","components/Card/card.js","components/Row/row.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Nav","class","id","href","target","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Card","onClick","imageClicked","name","clicked","src","image","alt","key","Row","fluid","Header","message","score","topScore","App","state","staff","imageShuffle","setState","sort","Math","random","staffImage","forEach","length","this","map","shuffle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yjCAMeA,G,MAJG,SAAAC,GAChB,OAAO,yBAAKC,UAAU,aAAaD,EAAME,Y,MCoC5BC,MApCf,WACE,OACE,yBAAKC,MAAM,8BACT,2CACA,yBAAKA,MAAM,WACT,yBAAKA,MAAM,WAAWC,GAAG,+BACvB,yBAAKD,MAAM,eACT,uBAAGE,KAAK,gCAAgCC,OAAO,UAC7C,wBAAIH,MAAM,iBAAV,YAEF,uBACEE,KAAK,qDACLC,OAAO,UAEP,wBAAIH,MAAM,iBAAV,eAIN,yBAAKA,MAAM,8BACT,4BACEA,MAAM,iBACNI,KAAK,SACLC,cAAY,WACZC,cAAY,+BACZC,gBAAc,8BACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,MAAM,6B,MClBTU,MATf,SAAed,GACX,OACI,yBAAKC,UAAU,gBACX,yBAAKc,QAAS,kBAAMf,EAAMgB,aAAahB,EAAMK,GAAIL,EAAMiB,KAAKjB,EAAMkB,UAAUC,IAAKnB,EAAMoB,MAAOC,IAAKrB,EAAMiB,KAAMK,IAAKtB,EAAMK,O,OCIvHkB,EATH,SAAAvB,GACV,OACE,uCACEC,UAAS,aAAQD,EAAMwB,MAAQ,SAAW,GAAjC,wBACLxB,KCSKyB,G,MAZA,SAAAzB,GACb,OACE,6BACE,sDACA,2BAAIA,EAAM0B,SACV,0BAAMrB,GAAG,SAAT,kBACkBL,EAAM2B,MADxB,kBAC8C3B,EAAM4B,aCgF3CC,E,2MA/EbC,MAAQ,CACNC,QACAL,QAAS,oCACTC,MAAO,EACPC,SAAU,G,EAGZI,aAAe,WACb,EAAKC,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAMG,MAAK,kBAAMC,KAAKC,SAAW,S,EAOrEpB,aAAe,SAAAX,GACb,IAAMgC,EAAa,EAAKP,MAAMC,MAE9BM,EAAWC,SAAQ,SAAAP,GACbA,EAAM1B,KAAOA,GAAM0B,EAAMb,SAC3BmB,EAAWC,SAAQ,SAAAD,GACjBA,EAAWnB,SAAU,KAGvB,EAAKe,SAAS,CACZN,MAAO,EACPD,QACE,qEAEKK,EAAM1B,KAAOA,GAAO0B,EAAMb,UACnCa,EAAMb,SAAU,EAChB,EAAKe,SAAS,CACZP,QAAS,mBACTC,MAAO,EAAKG,MAAMH,MAAQ,EAC1BC,SACE,EAAKE,MAAMH,MAAQ,EAAI,EAAKG,MAAMF,SAC9B,EAAKE,MAAMH,MAAQ,EACnB,EAAKG,MAAMF,eAKnB,EAAKE,MAAMH,MAAQ,IAAMU,EAAWE,QACtC,EAAKN,SAAS,CACZP,QAAS,oCAGb,EAAKM,gB,mFAnCLQ,KAAKR,iB,+BAsCG,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEN,QAASc,KAAKV,MAAMJ,QACpBC,MAAOa,KAAKV,MAAMH,MAClBC,SAAUY,KAAKV,MAAMF,WAGvB,kBAAC,EAAD,KACGY,KAAKV,MAAMC,MAAMU,KAAI,SAAAV,GAAK,OACzB,kBAAC,EAAD,CACE1B,GAAI0B,EAAM1B,GACViB,IAAKS,EAAM1B,GACXY,KAAMc,EAAMd,KACZG,MAAOW,EAAMX,MACbsB,QAAS,EAAKV,aACdhB,aAAc,EAAKA,yB,GAtEjB2B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlC,c","file":"static/js/main.447a0179.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Container = props => {\r\n  return <div className=\"container\">{props.children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport style from \"./style.css\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav class=\"navbar navbar-dark bg-dark\">\r\n      <h2>Memory Game</h2>\r\n      <div class=\"pos-f-t\">\r\n        <div class=\"collapse\" id=\"navbarToggleExternalContent\">\r\n          <div class=\"bg-dark p-4\">\r\n            <a href=\"https://github.com/Victord90/\" target=\"blank_\">\r\n              <h5 class=\"text-white h4\">Git Hub</h5>\r\n            </a>\r\n            <a\r\n              href=\"https://linkedin.com/in/victor-dominguez-b444b7191\"\r\n              target=\"blank_\"\r\n            >\r\n              <h5 class=\"text-white h4\">LinkedIn</h5>\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <nav class=\"navbar navbar-dark bg-dark\">\r\n          <button\r\n            class=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarToggleExternalContent\"\r\n            aria-controls=\"navbarToggleExternalContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n        </nav>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Card (props) {\r\n    return (\r\n        <div className=\"imgContainer\">\r\n            <img onClick={() => props.imageClicked(props.id, props.name,props.clicked)} src={props.image} alt={props.name} key={props.id}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Row = props => {\r\n  return (\r\n    <div\r\n      className={`row${props.fluid ? \"-fluid\" : \"\"} text-center theRow`}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport style from \"./style.css\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div>\r\n      <h1>The Office Click Game!</h1>\r\n      <p>{props.message}</p>\r\n      <span id=\"score\">\r\n        Current Score: {props.score} || Top Score: {props.topScore}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Container from \"./components/container/container\";\nimport Nav from \"./components/navbar/navbar\";\nimport Card from \"./components/Card/card\";\nimport staff from \"./staff.json\";\nimport Row from \"./components/Row/row\";\nimport Header from \"./components/header/header\";\n\nclass App extends Component {\n  state = {\n    staff,\n    message: \"Click The Office staff to begin!!\",\n    score: 0,\n    topScore: 0\n  };\n\n  imageShuffle = () => {\n    this.setState({ staff: this.state.staff.sort(() => Math.random() - 0.8) });\n  };\n\n  componentDidMount() {\n    this.imageShuffle();\n  }\n\n  imageClicked = id => {\n    const staffImage = this.state.staff;\n\n    staffImage.forEach(staff => {\n      if (staff.id === id && staff.clicked) {\n        staffImage.forEach(staffImage => {\n          staffImage.clicked = false;\n        });\n\n        this.setState({\n          score: 0,\n          message:\n            \"Sorry you clicked that cast memeber already! Please try again!!\"\n        });\n      } else if (staff.id === id && !staff.clicked) {\n        staff.clicked = true;\n        this.setState({\n          message: \"Correct Choice!!\",\n          score: this.state.score + 1,\n          topScore:\n            this.state.score + 1 > this.state.topScore\n              ? this.state.score + 1\n              : this.state.topScore\n        });\n      }\n    });\n\n    if (this.state.score + 1 === staffImage.length) {\n      this.setState({\n        message: \"You won!! Try your luck again!!\"\n      });\n    }\n    this.imageShuffle();\n  };\n\n  render() {\n    return (\n      <>\n        <Nav />\n        <Container>\n          <Header\n            message={this.state.message}\n            score={this.state.score}\n            topScore={this.state.topScore}\n          ></Header>\n\n          <Row>\n            {this.state.staff.map(staff => (\n              <Card\n                id={staff.id}\n                key={staff.id}\n                name={staff.name}\n                image={staff.image}\n                shuffle={this.imageShuffle}\n                imageClicked={this.imageClicked}\n              />\n            ))}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}