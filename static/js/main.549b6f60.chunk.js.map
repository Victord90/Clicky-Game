{"version":3,"sources":["components/container/container.js","components/navbar/navbar.js","components/Card/card.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Navbar","message","score","topScore","Card","onClick","imageClicked","id","name","clicked","src","image","alt","key","App","state","staff","imageShuffle","setState","sort","Math","random","staffImage","forEach","length","this","map","shuffle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qhCASeA,G,MALG,SAACC,GACf,OAAO,yBAAKC,UAAU,aAAaD,EAAME,YCS9BC,EAXA,SAACH,GACZ,OACI,6BACI,sDACA,2BAAIA,EAAMI,SACV,gDAAsBJ,EAAMK,MAA5B,kBAAkDL,EAAMM,Y,MCKrDC,MATf,SAAeP,GACX,OACI,yBAAKC,UAAU,gBACX,yBAAKO,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,GAAIV,EAAMW,KAAKX,EAAMY,UAAUC,IAAKb,EAAMc,MAAOC,IAAKf,EAAMW,KAAMK,IAAKhB,EAAMU,O,OCiFvHO,E,2MA7EbC,MAAQ,CACNC,QACAf,QAAS,oCACTC,MAAO,EACPC,SAAU,G,EAGZc,aAAe,WACb,EAAKC,SAAS,CAACF,MAAO,EAAKD,MAAMC,MAAMG,MAAK,kBAAMC,KAAKC,SAAW,S,EAOpEf,aAAe,SAACC,GAEd,IAAMe,EAAa,EAAKP,MAAMC,MAE9BM,EAAWC,SAAQ,SAACP,GAEdA,EAAMT,KAAOA,GAAMS,EAAMP,SAC3Ba,EAAWC,SAAQ,SAAAD,GACjBA,EAAWb,SAAU,KAEvB,EAAKS,SAAS,CACZhB,MAAM,EACND,QAAS,qEAEFe,EAAMT,KAAOA,GAAOS,EAAMP,UACnCO,EAAMP,SAAU,EAChB,EAAKS,SAAS,CACZjB,QAAS,mBACTC,MAAO,EAAKa,MAAMb,MAAQ,EAC1BC,SAAU,EAAKY,MAAMb,MAAQ,EAAI,EAAKa,MAAMZ,SAAW,EAAKY,MAAMb,MAAO,EAAI,EAAKa,MAAMZ,eAK1F,EAAKY,MAAMb,MAAQ,IAAMoB,EAAWE,QACtC,EAAKN,SAAS,CACZjB,QAAS,oCAIb,EAAKgB,gB,mFAjCLQ,KAAKR,iB,+BAuCG,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEhB,QAASwB,KAAKV,MAAMd,QACpBC,MAAOuB,KAAKV,MAAMb,MAClBC,SAAUsB,KAAKV,MAAMZ,WAGtBsB,KAAKV,MAAMC,MAAMU,KAAI,SAAAV,GAAK,OACzB,kBAAC,EAAD,CACAT,GAAIS,EAAMT,GACVM,IAAKG,EAAMT,GACXC,KAAMQ,EAAMR,KACZG,MAAOK,EAAML,MACbgB,QAAS,EAAKV,aACdX,aAAc,EAAKA,uB,GArEXsB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.549b6f60.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nconst Container = (props) => {\r\n    return <div className=\"container\">{props.children}</div>\r\n};\r\n\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav>\r\n            <h1>The Office Click Game!</h1>\r\n            <p>{props.message}</p>\r\n            <span>Current Score: {props.score} || Top Score: {props.topScore}</span>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Card (props) {\r\n    return (\r\n        <div className=\"imgContainer\">\r\n            <img onClick={() => props.imageClicked(props.id, props.name,props.clicked)} src={props.image} alt={props.name} key={props.id}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Container from './components/container/container';\nimport Navbar from './components/navbar/navbar';\nimport Card from './components/Card/card';\nimport staff from './staff.json';\n\n\n\nclass App extends Component {\n\n  state = {\n    staff,\n    message: \"Click The Office staff to begin!!\",\n    score: 0,\n    topScore: 0\n  };\n\n  imageShuffle = () => {\n    this.setState({staff: this.state.staff.sort(() => Math.random() - .8)});\n  }\n\n  componentDidMount() {\n    this.imageShuffle();\n  }\n\n  imageClicked = (id) => {\n\n    const staffImage = this.state.staff\n\n    staffImage.forEach((staff) => {\n      \n      if (staff.id === id && staff.clicked) {\n        staffImage.forEach(staffImage => {\n          staffImage.clicked = false\n        });\n        this.setState({\n          score:0,\n          message: \"Sorry you clicked that cast memeber already! Please try again!!\"\n          });\n      } else if (staff.id === id && !staff.clicked) {\n        staff.clicked = true\n        this.setState({\n          message: \"Correct Choice!!\",\n          score: this.state.score + 1,\n          topScore: this.state.score + 1 > this.state.topScore ? this.state.score +1 : this.state.topScore\n        });\n      }\n    })\n\n    if (this.state.score + 1 === staffImage.length) {\n      this.setState({\n        message: \"You won!! Try your luck again!!\",\n      });\n\n    }\n    this.imageShuffle()\n  };\n\n\n\n\n  render() {\n    return (\n      <Container>\n        <Navbar\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}>\n        </Navbar>\n       \n        {this.state.staff.map(staff => (\n          <Card\n          id={staff.id}\n          key={staff.id}\n          name={staff.name}\n          image={staff.image}\n          shuffle={this.imageShuffle}\n          imageClicked={this.imageClicked} />\n        ))}\n  \n      </Container>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}